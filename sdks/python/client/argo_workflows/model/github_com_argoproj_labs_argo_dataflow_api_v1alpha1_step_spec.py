"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from argo_workflows.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from argo_workflows.exceptions import ApiAttributeError


def lazy_import():
    from argo_workflows.model.affinity import Affinity
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_cat import GithubComnholuongutLabsArgoDataflowApiV1alpha1Cat
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_code import GithubComnholuongutLabsArgoDataflowApiV1alpha1Code
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_container import GithubComnholuongutLabsArgoDataflowApiV1alpha1Container
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_dedupe import GithubComnholuongutLabsArgoDataflowApiV1alpha1Dedupe
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_expand import GithubComnholuongutLabsArgoDataflowApiV1alpha1Expand
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_filter import GithubComnholuongutLabsArgoDataflowApiV1alpha1Filter
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_flatten import GithubComnholuongutLabsArgoDataflowApiV1alpha1Flatten
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_git import GithubComnholuongutLabsArgoDataflowApiV1alpha1Git
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_group import GithubComnholuongutLabsArgoDataflowApiV1alpha1Group
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_map import GithubComnholuongutLabsArgoDataflowApiV1alpha1Map
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_metadata import GithubComnholuongutLabsArgoDataflowApiV1alpha1Metadata
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_scale import GithubComnholuongutLabsArgoDataflowApiV1alpha1Scale
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_sidecar import GithubComnholuongutLabsArgoDataflowApiV1alpha1Sidecar
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_sink import GithubComnholuongutLabsArgoDataflowApiV1alpha1Sink
    from argo_workflows.model.github_com_nholuongut_labs_argo_dataflow_api_v1alpha1_source import GithubComnholuongutLabsArgoDataflowApiV1alpha1Source
    from argo_workflows.model.local_object_reference import LocalObjectReference
    from argo_workflows.model.toleration import Toleration
    from argo_workflows.model.volume import Volume
    globals()['Affinity'] = Affinity
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Cat'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Cat
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Code'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Code
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Container'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Container
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Dedupe'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Dedupe
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Expand'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Expand
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Filter'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Filter
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Flatten'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Flatten
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Git'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Git
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Group'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Group
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Map'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Map
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Metadata'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Metadata
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Scale'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Scale
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Sidecar'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Sidecar
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Sink'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Sink
    globals()['GithubComnholuongutLabsArgoDataflowApiV1alpha1Source'] = GithubComnholuongutLabsArgoDataflowApiV1alpha1Source
    globals()['LocalObjectReference'] = LocalObjectReference
    globals()['Toleration'] = Toleration
    globals()['Volume'] = Volume


class GithubComnholuongutLabsArgoDataflowApiV1alpha1StepSpec(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'affinity': (Affinity,),  # noqa: E501
            'cat': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Cat,),  # noqa: E501
            'code': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Code,),  # noqa: E501
            'container': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Container,),  # noqa: E501
            'dedupe': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Dedupe,),  # noqa: E501
            'expand': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Expand,),  # noqa: E501
            'filter': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Filter,),  # noqa: E501
            'flatten': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Flatten,),  # noqa: E501
            'git': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Git,),  # noqa: E501
            'group': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Group,),  # noqa: E501
            'image_pull_secrets': ([LocalObjectReference],),  # noqa: E501
            'map': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Map,),  # noqa: E501
            'metadata': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Metadata,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'node_selector': ({str: (str,)},),  # noqa: E501
            'replicas': (int,),  # noqa: E501
            'restart_policy': (str,),  # noqa: E501
            'scale': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Scale,),  # noqa: E501
            'service_account_name': (str,),  # noqa: E501
            'sidecar': (GithubComnholuongutLabsArgoDataflowApiV1alpha1Sidecar,),  # noqa: E501
            'sinks': ([GithubComnholuongutLabsArgoDataflowApiV1alpha1Sink],),  # noqa: E501
            'sources': ([GithubComnholuongutLabsArgoDataflowApiV1alpha1Source],),  # noqa: E501
            'terminator': (bool,),  # noqa: E501
            'tolerations': ([Toleration],),  # noqa: E501
            'volumes': ([Volume],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'affinity': 'affinity',  # noqa: E501
        'cat': 'cat',  # noqa: E501
        'code': 'code',  # noqa: E501
        'container': 'container',  # noqa: E501
        'dedupe': 'dedupe',  # noqa: E501
        'expand': 'expand',  # noqa: E501
        'filter': 'filter',  # noqa: E501
        'flatten': 'flatten',  # noqa: E501
        'git': 'git',  # noqa: E501
        'group': 'group',  # noqa: E501
        'image_pull_secrets': 'imagePullSecrets',  # noqa: E501
        'map': 'map',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'name': 'name',  # noqa: E501
        'node_selector': 'nodeSelector',  # noqa: E501
        'replicas': 'replicas',  # noqa: E501
        'restart_policy': 'restartPolicy',  # noqa: E501
        'scale': 'scale',  # noqa: E501
        'service_account_name': 'serviceAccountName',  # noqa: E501
        'sidecar': 'sidecar',  # noqa: E501
        'sinks': 'sinks',  # noqa: E501
        'sources': 'sources',  # noqa: E501
        'terminator': 'terminator',  # noqa: E501
        'tolerations': 'tolerations',  # noqa: E501
        'volumes': 'volumes',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """GithubComnholuongutLabsArgoDataflowApiV1alpha1StepSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            affinity (Affinity): [optional]  # noqa: E501
            cat (GithubComnholuongutLabsArgoDataflowApiV1alpha1Cat): [optional]  # noqa: E501
            code (GithubComnholuongutLabsArgoDataflowApiV1alpha1Code): [optional]  # noqa: E501
            container (GithubComnholuongutLabsArgoDataflowApiV1alpha1Container): [optional]  # noqa: E501
            dedupe (GithubComnholuongutLabsArgoDataflowApiV1alpha1Dedupe): [optional]  # noqa: E501
            expand (GithubComnholuongutLabsArgoDataflowApiV1alpha1Expand): [optional]  # noqa: E501
            filter (GithubComnholuongutLabsArgoDataflowApiV1alpha1Filter): [optional]  # noqa: E501
            flatten (GithubComnholuongutLabsArgoDataflowApiV1alpha1Flatten): [optional]  # noqa: E501
            git (GithubComnholuongutLabsArgoDataflowApiV1alpha1Git): [optional]  # noqa: E501
            group (GithubComnholuongutLabsArgoDataflowApiV1alpha1Group): [optional]  # noqa: E501
            image_pull_secrets ([LocalObjectReference]): [optional]  # noqa: E501
            map (GithubComnholuongutLabsArgoDataflowApiV1alpha1Map): [optional]  # noqa: E501
            metadata (GithubComnholuongutLabsArgoDataflowApiV1alpha1Metadata): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            node_selector ({str: (str,)}): [optional]  # noqa: E501
            replicas (int): [optional]  # noqa: E501
            restart_policy (str): [optional]  # noqa: E501
            scale (GithubComnholuongutLabsArgoDataflowApiV1alpha1Scale): [optional]  # noqa: E501
            service_account_name (str): [optional]  # noqa: E501
            sidecar (GithubComnholuongutLabsArgoDataflowApiV1alpha1Sidecar): [optional]  # noqa: E501
            sinks ([GithubComnholuongutLabsArgoDataflowApiV1alpha1Sink]): [optional]  # noqa: E501
            sources ([GithubComnholuongutLabsArgoDataflowApiV1alpha1Source]): [optional]  # noqa: E501
            terminator (bool): [optional]  # noqa: E501
            tolerations ([Toleration]): [optional]  # noqa: E501
            volumes ([Volume]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """GithubComnholuongutLabsArgoDataflowApiV1alpha1StepSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            affinity (Affinity): [optional]  # noqa: E501
            cat (GithubComnholuongutLabsArgoDataflowApiV1alpha1Cat): [optional]  # noqa: E501
            code (GithubComnholuongutLabsArgoDataflowApiV1alpha1Code): [optional]  # noqa: E501
            container (GithubComnholuongutLabsArgoDataflowApiV1alpha1Container): [optional]  # noqa: E501
            dedupe (GithubComnholuongutLabsArgoDataflowApiV1alpha1Dedupe): [optional]  # noqa: E501
            expand (GithubComnholuongutLabsArgoDataflowApiV1alpha1Expand): [optional]  # noqa: E501
            filter (GithubComnholuongutLabsArgoDataflowApiV1alpha1Filter): [optional]  # noqa: E501
            flatten (GithubComnholuongutLabsArgoDataflowApiV1alpha1Flatten): [optional]  # noqa: E501
            git (GithubComnholuongutLabsArgoDataflowApiV1alpha1Git): [optional]  # noqa: E501
            group (GithubComnholuongutLabsArgoDataflowApiV1alpha1Group): [optional]  # noqa: E501
            image_pull_secrets ([LocalObjectReference]): [optional]  # noqa: E501
            map (GithubComnholuongutLabsArgoDataflowApiV1alpha1Map): [optional]  # noqa: E501
            metadata (GithubComnholuongutLabsArgoDataflowApiV1alpha1Metadata): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            node_selector ({str: (str,)}): [optional]  # noqa: E501
            replicas (int): [optional]  # noqa: E501
            restart_policy (str): [optional]  # noqa: E501
            scale (GithubComnholuongutLabsArgoDataflowApiV1alpha1Scale): [optional]  # noqa: E501
            service_account_name (str): [optional]  # noqa: E501
            sidecar (GithubComnholuongutLabsArgoDataflowApiV1alpha1Sidecar): [optional]  # noqa: E501
            sinks ([GithubComnholuongutLabsArgoDataflowApiV1alpha1Sink]): [optional]  # noqa: E501
            sources ([GithubComnholuongutLabsArgoDataflowApiV1alpha1Source]): [optional]  # noqa: E501
            terminator (bool): [optional]  # noqa: E501
            tolerations ([Toleration]): [optional]  # noqa: E501
            volumes ([Volume]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
